import unittest

test = [[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1]]
test2 = [[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0]]
test3 = [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,1]]
test4 = [[0,1,1],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]
test5 = [[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,0,0]]
test6 = [[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1]]
test7 = [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]
test8 = [[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1]]
test9 = [[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1]]
test10 = [[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1]]
test11 = [[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1]]
test12 = [[0,0,0],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1]]
test13 = [[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,0,0],[0,0,0],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,1,1]]
test14 = [[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,1,1]]
test15 = [[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1]]
test16 = [[0,0,0],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,0,0]]
test17 = [[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1]]

sum_test = [[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,0,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1]]
sum_test2 = [[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,9,1],[0,0,0]]
sum_test3 = [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,1]]
sum_test4 = [[0,1,1],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]
sum_test5 = [[0,0,0],[0,1,1],[0,0,0],[0,1,0],[0,2,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,0,0]]
sum_test6 = [[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,10,1]]
sum_test7 = [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]
sum_test8 = [[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,0,0],[0,1,1],[0,0,0],[0,1,0],[0,1,0],[0,3,1]]
sum_test9 = [[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,0,0],[0,1,1],[0,0,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1],[0,0,0],[0,1,0],[0,1,0],[0,3,1],[0,0,0],[0,1,0],[0,1,0],[0,3,1]]
sum_test10 = [[0,1,1],[0,0,0],[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,0,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1],[0,0,0],[0,1,1],[0,0,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1]]
sum_test11 = [[0,1,0],[0,1,0],[0,3,1],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1],[0,0,0],[0,1,1],[0,0,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1]]
sum_test12 = [[0,0,0],[0,0,0],[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,0,0],[0,0,0],[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,0,0],[0,1,0],[0,1,0],[0,3,1],[0,0,0],[0,1,0],[0,1,0],[0,3,1]]
sum_test13 = [[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1],[0,0,0],[0,0,0],[0,0,0],[0,1,0],[0,2,1],[0,0,0],[0,1,0],[0,1,0],[0,3,1],[0,0,0],[0,1,0],[0,2,1],[0,0,0],[0,1,0],[0,2,1]]
sum_test14 = [[0,1,1],[0,0,0],[0,1,0],[0,2,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,0],[0,1,0],[0,3,1],[0,0,0],[0,1,1],[0,0,0],[0,1,0],[0,2,1],[0,0,0],[0,1,0],[0,2,1]]
sum_test15 = [[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1],[0,0,0],[0,0,0],[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1]]
sum_test16 = [[0,0,0],[0,0,0],[0,1,0],[0,1,0],[0,3,1],[0,0,0],[0,0,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,7,1],[0,0,0],[0,0,0],[0,1,0],[0,1,0],[0,3,1],[0,0,0]]
sum_test17 = [[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,6,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1],[0,0,0],[0,1,1]]

local_test = [[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,7,2],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1]]
local_test2 = [[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,9,1],[0,8,2]]
local_test3 = [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,2],[0,1,1]]
local_test4 = [[0,1,1],[0,0,2],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]
local_test5 = [[0,0,2],[0,1,1],[0,1,2],[0,1,0],[0,2,1],[0,1,2],[0,1,1],[0,0,2],[0,1,1],[0,0,2]]
local_test6 = [[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,10,1]]
local_test7 = [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]
local_test8 = [[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,4,2],[0,1,1],[0,4,2],[0,1,0],[0,1,0],[0,3,1]]
local_test9 = [[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,6,2],[0,1,1],[0,7,2],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1],[0,8,2],[0,1,0],[0,1,0],[0,3,1],[0,7,2],[0,1,0],[0,1,0],[0,3,1]]
local_test10 = [[0,1,1],[0,7,2],[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,9,2],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1],[0,9,2],[0,1,1],[0,8,2],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1]]
local_test11 = [[0,1,0],[0,1,0],[0,3,1],[0,3,2],[0,3,2],[0,4,2],[0,6,2],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1],[0,7,2],[0,1,1],[0,7,2],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1]]
local_test12 = [[0,2,2],[0,4,2],[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,5,2],[0,6,2],[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,7,2],[0,1,0],[0,1,0],[0,3,1],[0,6,2],[0,1,0],[0,1,0],[0,3,1]]
local_test13 = [[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1],[0,4,2],[0,3,2],[0,4,2],[0,1,0],[0,2,1],[0,4,2],[0,1,0],[0,1,0],[0,3,1],[0,3,2],[0,1,0],[0,2,1],[0,3,2],[0,1,0],[0,2,1]]
local_test14 = [[0,1,1],[0,1,2],[0,1,0],[0,2,1],[0,1,2],[0,1,1],[0,1,2],[0,1,1],[0,2,2],[0,1,0],[0,1,0],[0,3,1],[0,2,2],[0,1,1],[0,2,2],[0,1,0],[0,2,1],[0,2,2],[0,1,0],[0,2,1]]
local_test15 = [[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1],[0,6,2],[0,6,2],[0,1,0],[0,1,0],[0,1,0],[0,4,1],[0,6,2],[0,5,2],[0,4,2],[0,4,2],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,5,1]]
local_test16 = [[0,4,2],[0,6,2],[0,1,0],[0,1,0],[0,3,1],[0,7,2],[0,7,2],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,7,1],[0,7,2],[0,7,2],[0,1,0],[0,1,0],[0,3,1],[0,6,2]]
local_test17 = [[0,1,1],[0,3,2],[0,1,1],[0,4,2],[0,1,1],[0,5,2],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,1,0],[0,6,1],[0,5,2],[0,1,1],[0,4,2],[0,1,1],[0,3,2],[0,1,1],[0,2,2],[0,1,1]]


def sum_ones(apis):
    count = 0
    # In all APIs
    for i in range(len(apis)):
        # If it's in FP API lists
        if apis[i][1] == 1:
            # Adds 1 to counter and set the flag to 0
            count = count + 1
            apis[i][2] = 0
            # 
            if (i+1< len(apis)) and apis[i+1][1] != 1:
                apis[i][1] = apis[i][1] + count - 1
                apis[i][2] = 1
                count = 0
            elif i + 1 == len(apis) and apis[i][1] == 1:
                apis[i][1] = apis[i][1] + count - 1 
                apis[i][2] = 1
                count = 0
            elif (i+1< len(apis)) and apis[i+1][1] == 1:
                count = count
            else:
                count = 0
    

# sum_ones(test9)
# print(str(test9))

def cal_local(apis):
    for i in range(len(apis)):
        # Initialization
        buffer_neg = 0
        buffer_pos = 0
        index_neg = 0
        index_pos = 0
        # If it's the API that has summed value
        if apis[i][2] == 1:
            # Get the summed value
            buffer_neg = apis[i][1]
            buffer_pos = apis[i][1]
            # Get the index 
            index_neg = i
            index_pos = i
            # print(str(i)+"----"+str(buffer_neg))
            # while the summed value is positive
            while buffer_neg > 0 or buffer_pos > 0:

                index_neg = index_neg - 1
                # print(str(index_neg) + "____"+str(apis[index_neg][1]))
                # print(str((index_neg > 0))+"QQQ"+str((apis[index_neg][1] != 1)))
                # print(str(type(apis[index_neg][1]))+"QQQ"+str(type(1)))
                # print(str(apis[index_neg][1]) == 1)
                index_pos = index_pos + 1
                if index_neg >= 0 and apis[index_neg][1] != 1 and apis[index_neg][2] != 1 and buffer_neg >= 1:
                    buffer_neg = buffer_neg - 1
                    apis[index_neg][1] = apis[index_neg][1] + buffer_neg
                    apis[index_neg][2] = 2
                elif index_neg >= 0 and apis[index_neg][2] == 1 and buffer_neg >= 1:
                    buffer_neg = buffer_neg
                elif index_neg >= 0 and apis[index_neg][1] == 1 and apis[index_neg][2] == 2:
                    buffer_neg = buffer_neg - 1
                    apis[index_neg][1] = apis[index_neg][1] + buffer_neg
                    apis[index_neg][2] = 2
                elif index_neg >= 0 and apis[index_neg][1] == 1 and apis[index_neg][2] == 0:
                    buffer_neg = buffer_neg
                elif index_neg < 0:
                    buffer_neg = 0
                if index_pos < len(apis) and apis[index_pos][1] != 1 and apis[index_pos][2] != 1 and buffer_pos >= 1:
                    buffer_pos = buffer_pos - 1
                    apis[index_pos][1] = apis[index_pos][1] + buffer_pos
                    apis[index_pos][2] = 2
                elif index_pos < len(apis) and apis[index_pos][2] == 1 and buffer_pos >= 1:
                    buffer_pos = buffer_pos
                elif index_pos < len(apis) and apis[index_pos][1] == 1 and apis[index_pos][2] == 0:
                    buffer_pos = buffer_pos
                elif index_pos < len(apis) and apis[index_pos][1] == 1 and apis[index_pos][2] == 2:
                    buffer_pos = buffer_pos - 1
                    apis[index_pos][1] = apis[index_pos][1] + buffer_pos
                    apis[index_pos][2] = 2
                else :
                    buffer_pos = 0
                


# cal_local(test9)
# print(str(test9))

class TestMethods(unittest.TestCase):

    def test_sum(self):
        sum_ones(test)
        sum_ones(test2)
        sum_ones(test3)
        sum_ones(test4)
        sum_ones(test5)
        sum_ones(test6)
        sum_ones(test7)
        sum_ones(test8)
        sum_ones(test9)
        sum_ones(test10)
        sum_ones(test11)
        sum_ones(test12)
        sum_ones(test13)
        sum_ones(test14)
        sum_ones(test15)
        sum_ones(test16)
        sum_ones(test17)
        self.assertEqual(test, sum_test)
        self.assertEqual(test2, sum_test2)
        self.assertEqual(test3, sum_test3)
        self.assertEqual(test4, sum_test4)
        self.assertEqual(test5, sum_test5)
        self.assertEqual(test6, sum_test6)
        self.assertEqual(test7, sum_test7)
        self.assertEqual(test8, sum_test8)
        self.assertEqual(test9, sum_test9)
        self.assertEqual(test10, sum_test10)
        self.assertEqual(test11, sum_test11)
        self.assertEqual(test12, sum_test12)
        self.assertEqual(test13, sum_test13)
        self.assertEqual(test14, sum_test14)
        self.assertEqual(test15, sum_test15)
        self.assertEqual(test16, sum_test16)
        self.assertEqual(test17, sum_test17)

        cal_local(test)
        cal_local(test2)
        cal_local(test3)
        cal_local(test4)
        cal_local(test5)
        cal_local(test6)
        cal_local(test7)
        cal_local(test8)
        cal_local(test9)
        cal_local(test10)
        cal_local(test11)
        cal_local(test12)
        cal_local(test13)
        cal_local(test14)
        cal_local(test15)
        cal_local(test16)
        cal_local(test17)
        self.assertEqual(test, local_test)
        self.assertEqual(test2, local_test2)
        self.assertEqual(test3, local_test3)
        self.assertEqual(test4, local_test4)
        self.assertEqual(test5, local_test5)
        self.assertEqual(test6, local_test6)
        self.assertEqual(test7, local_test7)
        self.assertEqual(test8, local_test8)
        self.assertEqual(test9, local_test9)
        self.assertEqual(test10, local_test10)
        self.assertEqual(test11, local_test11)
        self.assertEqual(test12, local_test12)
        self.assertEqual(test13, local_test13)
        self.assertEqual(test14, local_test14)
        self.assertEqual(test15, local_test15)
        self.assertEqual(test16, local_test16)
        self.assertEqual(test17, local_test17)

if __name__ == '__main__':
    unittest.main()